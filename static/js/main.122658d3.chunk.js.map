{"version":3,"sources":["Counter.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Counter","props","useState","digitElements","setDigitElements","count","toString","oldCount","setOldCount","initial","setInitial","background","className","setDigitElementsFunc","newNumber","refresh","newNumberArray","split","oldNumberArray","newDigits","i","length","console","log","push","useEffect","setTimeout","animationLength","App","setCount","window","location","search","substr","mostSignificant","setInterval","fetch","then","e","json","TotalItemCount","Math","round","random","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAoFeA,MA5Ef,SAAiBC,GACf,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAgCF,mBAASD,EAAMI,MAAMC,YAArD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAIMC,EACJ,qCACE,qBAAKC,UAAW,QAChB,qBAAKA,UAAW,QAChB,qBAAKA,UAAW,QAChB,qBAAKA,UAAW,WAIdC,EAAuB,SAACC,EAAmBC,GAI/C,IAHA,IAAMC,EAAiBF,EAAUR,WAAWW,MAAM,IAC5CC,EAAiBX,EAASU,MAAM,IAChCE,EAAY,GACTC,EAAI,EAAGA,EAAIJ,EAAeK,OAAQD,IACrCL,GACFO,QAAQC,IAAI,WACZJ,EAAUK,KACR,sBAAKZ,UAAW,QAAhB,UACGD,EACD,qBAAKC,UAAW,MAAhB,SAAwBI,EAAeI,KACvC,qBAAKR,UAAW,SAAhB,SAA2BI,EAAeI,UAGrCJ,EAAeI,KAAOF,EAAeE,GAC9CD,EAAUK,KACR,sBAAKZ,UAAW,QAAhB,UACGD,EAED,qBAAKC,UAAW,MAAhB,SAAwBI,EAAeI,KACvC,qBAAKR,UAAW,SAAhB,SAA2BM,EAAeE,KAC1C,qBAAKR,UAAW,OAAhB,SAAyBM,EAAeE,KACxC,qBAAKR,UAAW,cAAhB,SAAgCI,EAAeI,SAInDD,EAAUK,KACR,sBAAKZ,UAAW,QAAhB,UACGD,EAED,qBAAKC,UAAW,MAAhB,SAAwBM,EAAeE,KACvC,qBAAKR,UAAW,SAAhB,SAA2BM,EAAeE,SAKlDhB,EAAiBe,IAqBnB,OAlBAM,qBAAU,WACR,GAAIhB,EAGF,OAFAC,GAAW,QACXG,EAAqBZ,EAAMI,OAAO,GAGpCiB,QAAQC,IAAI,YAAatB,EAAMI,OAC/BQ,EAAqBZ,EAAMI,OAE3BqB,YAAW,WACTlB,EAAYP,EAAMI,MAAMC,cACvBqB,KAEHD,YAAW,WACTb,EAAqBZ,EAAMI,OAAO,KACjCsB,OACF,CAAC1B,EAAMI,QAEH,qBAAKO,UAAU,YAAf,SAA4BT,KC3CtByB,MAjCf,SAAa3B,GACX,MAA0BC,mBAAS,MAAnC,mBAAOG,EAAP,KAAcwB,EAAd,KACA,EAA8C3B,mBACP,oBAArC4B,OAAOC,SAASC,OAAOC,OAAO,IADhC,mBAAOC,EAAP,KAwBA,OAxBA,KAIAT,qBAAU,WACRU,aAAY,WAMZC,MAAM,oEACHC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACC,GACLhB,QAAQC,IAAIe,EAAEE,gBACdF,EAAEE,gBAAkBC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpCrB,QAAQC,IAAIe,EAAEE,gBAEZX,EADEK,EACOI,EAAEE,eAAelC,WAAWsC,MAAM,EAAG,GAErCN,EAAEE,eAAelC,WAAWsC,MAAM,SAb9C,OACF,IAiBD,qBAAKhC,UAAU,OAAf,SACE,cAAC,EAAD,CAASP,MAAOA,OCrBPwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.122658d3.chunk.js","sourcesContent":["// @ts-nocheck\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\ntype Props = {\n  count: number;\n};\n\nfunction Counter(props: Props) {\n  const [digitElements, setDigitElements] = useState([]);\n  const [oldCount, setOldCount] = useState(props.count.toString());\n  const [initial, setInitial] = useState(true);\n\n  const animationLength = 400;\n\n  const background = (\n    <>\n      <div className={\"bg1\"}></div>\n      <div className={\"bg2\"}></div>\n      <div className={\"bg3\"}></div>\n      <div className={\"bg4\"}></div>\n    </>\n  );\n\n  const setDigitElementsFunc = (newNumber: number, refresh?: boolean) => {\n    const newNumberArray = newNumber.toString().split(\"\");\n    const oldNumberArray = oldCount.split(\"\");\n    const newDigits = [];\n    for (let i = 0; i < newNumberArray.length; i++) {\n      if (refresh) {\n        console.log(\"herrree\");\n        newDigits.push(\n          <div className={\"digit\"}>\n            {background}\n            <div className={\"top\"}>{newNumberArray[i]}</div>\n            <div className={\"bottom\"}>{newNumberArray[i]}</div>\n          </div>\n        );\n      } else if (newNumberArray[i] !== oldNumberArray[i]) {\n        newDigits.push(\n          <div className={\"digit\"}>\n            {background}\n\n            <div className={\"top\"}>{newNumberArray[i]}</div>\n            <div className={\"bottom\"}>{oldNumberArray[i]}</div>\n            <div className={\"half\"}>{oldNumberArray[i]}</div>\n            <div className={\"bottom-half\"}>{newNumberArray[i]}</div>\n          </div>\n        );\n      } else {\n        newDigits.push(\n          <div className={\"digit\"}>\n            {background}\n\n            <div className={\"top\"}>{oldNumberArray[i]}</div>\n            <div className={\"bottom\"}>{oldNumberArray[i]}</div>\n          </div>\n        );\n      }\n    }\n    setDigitElements(newDigits);\n  };\n\n  useEffect(() => {\n    if (initial) {\n      setInitial(false);\n      setDigitElementsFunc(props.count, true);\n      return;\n    }\n    console.log(\"here once\", props.count);\n    setDigitElementsFunc(props.count);\n\n    setTimeout(() => {\n      setOldCount(props.count.toString());\n    }, animationLength / 2);\n\n    setTimeout(() => {\n      setDigitElementsFunc(props.count, true);\n    }, animationLength + 50);\n  }, [props.count]);\n\n  return <div className=\"container\">{digitElements}</div>;\n}\n\nexport default Counter;\n","// @ts-nocheck\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Counter from \"./Counter.tsx\";\n\nfunction App(props) {\n  const [count, setCount] = useState(2014);\n  const [mostSignificant, setMostSignificant] = useState(\n    window.location.search.substr(1) === \"mostSignificant\"\n  );\n\n  useEffect(() => {\n    setInterval(() => {\n      randomCount();\n    }, 1000);\n  }, []);\n\n  function randomCount() {\n    fetch(\"https://zambrero.xchangefusion.com/api/product/getdonationbyid/2\")\n      .then((e) => e.json())\n      .then((e) => {\n        console.log(e.TotalItemCount);\n        e.TotalItemCount += Math.round(Math.random() * 100);\n        console.log(e.TotalItemCount);\n        if (mostSignificant) {\n          setCount(e.TotalItemCount.toString().slice(0, 4));\n        } else {\n          setCount(e.TotalItemCount.toString().slice(4));\n        }\n      });\n  }\n  return (\n    <div className=\"body\">\n      <Counter count={count} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}